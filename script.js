
// PROJECT POK√âMON (Pok√©API)

const pokemonDataElement = document.getElementById('pokemon-data');

// H√†m ch·ªçn ng·∫´u nhi√™n m·ªôt ID Pok√©mon (1‚Äì151)
function getRandomPokemonId() {
    return Math.floor(Math.random() * (151 - 1 + 1) + 1);
}

// H√†m l·∫•y d·ªØ li·ªáu Pok√©mon ng·∫´u nhi√™n
async function fetchRandomPokemonData() {
    const randomId = getRandomPokemonId();
    const POKEAPI_URL = `https://pokeapi.co/api/v2/pokemon/${randomId}`;

    pokemonDataElement.innerHTML = '<p>ƒêang t·∫£i d·ªØ li·ªáu Pok√©mon ng·∫´u nhi√™n...</p>';
    try {
        const response = await fetch(POKEAPI_URL);
        if (!response.ok) throw new Error(`L·ªói HTTP: ${response.status}`);

        const data = await response.json();
        const name = data.name.toUpperCase();
        const height = (data.height / 10).toFixed(1);
        const weight = (data.weight / 10).toFixed(1);
        const imageUrl = data.sprites.front_default;
        const abilities = data.abilities.map(a => a.ability.name).join(', ');

        pokemonDataElement.innerHTML = `
            <img src="${imageUrl}" alt="${name}" style="width: 100px; height: 100px;">
            <h4>${name} (#${data.id})</h4>
            <p><b>Chi·ªÅu cao:</b> ${height} m</p>
            <p><b>C√¢n n·∫∑ng:</b> ${weight} kg</p>
            <p><b>Kh·∫£ nƒÉng:</b> ${abilities}</p>
        `;
    } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu Pok√©mon:", error);
        pokemonDataElement.innerHTML = '<p style="color: red;">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu Pok√©mon üòî</p>';
    }
}

//  PROJECT TH·ªúI TI·∫æT (Open-Meteo + OpenStreetMap)

const weatherDataElement = document.getElementById('weather-data');
const refreshWeatherBtn = document.getElementById('refresh-weather');
const OPENMETEO_BASE_URL = 'https://api.open-meteo.com/v1/forecast?current_weather=true&';

// H√†m √°nh x·∫° m√£ th·ªùi ti·∫øt (WMO Code)
function getWeatherDisplay(wmoCode) {
    const iconBaseClass = 'weather-icon fas'; 
    if (wmoCode === 0) return { icon: `${iconBaseClass} fa-sun`, description: 'Tr·ªùi quang m√¢y' };
    if (wmoCode >= 1 && wmoCode <= 3) return { icon: `${iconBaseClass} fa-cloud-sun`, description: 'C√≥ m√¢y, M√¢y r·∫£i r√°c' };
    if (wmoCode >= 45 && wmoCode <= 48) return { icon: `${iconBaseClass} fa-smog`, description: 'S∆∞∆°ng m√π' };
    if (wmoCode >= 51 && wmoCode <= 65) return { icon: `${iconBaseClass} fa-cloud-rain`, description: 'M∆∞a nh·∫π ƒë·∫øn v·ª´a' };
    if (wmoCode >= 66 && wmoCode <= 67) return { icon: `${iconBaseClass} fa-cloud-showers-heavy`, description: 'M∆∞a ƒë√≥ng bƒÉng' };
    if (wmoCode >= 71 && wmoCode <= 75) return { icon: `${iconBaseClass} fa-snowflake`, description: 'Tuy·∫øt' };
    if (wmoCode >= 80 && wmoCode <= 82) return { icon: `${iconBaseClass} fa-cloud-showers-heavy`, description: 'M∆∞a r√†o m·∫°nh' };
    if (wmoCode >= 95 && wmoCode <= 99) return { icon: `${iconBaseClass} fa-bolt`, description: 'Gi√¥ng b√£o' };
    return { icon: `${iconBaseClass} fa-question-circle`, description: 'Kh√¥ng x√°c ƒë·ªãnh' };
}

// H√†m l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt
async function fetchWeatherData(latitude, longitude) {
    weatherDataElement.innerHTML = '<p>ƒêang t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt...</p>';
    try {
        const WEATHER_URL = `${OPENMETEO_BASE_URL}latitude=${latitude}&longitude=${longitude}`;
        const response = await fetch(WEATHER_URL);
        if (!response.ok) throw new Error(`L·ªói HTTP: ${response.status}`);

        const data = await response.json();
        const weather = data.current_weather;
        if (!weather) throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt.");

        const { icon, description } = getWeatherDisplay(weather.weathercode);
        
        // L·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm (OpenStreetMap)
        const locationResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`);
        const locationData = await locationResponse.json();
        const locationName = locationData.address.city || locationData.address.town || locationData.address.village || 'V·ªã tr√≠ hi·ªán t·∫°i';

        weatherDataElement.innerHTML = `
            <div class="${icon} weather-icon"></div>
            <h4>${locationName}</h4>
            <p class="weather-info">${weather.temperature}¬∞C</p>
            <p>${description}</p>
            <p class="small-text">T·ªëc ƒë·ªô gi√≥: ${weather.windspeed} km/h</p>
        `;
    } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt:", error);
        weatherDataElement.innerHTML = '<p style="color: red;">Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt. L·ªói API ho·∫∑c M·∫•t k·∫øt n·ªëi.</p>';
    }
}

function getLocationAndFetchWeather() {
    weatherDataElement.innerHTML = '<p>ƒêang c·ªë g·∫Øng l·∫•y v·ªã tr√≠...</p>';
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                fetchWeatherData(lat, lon);
            },
            (error) => {
                console.error("L·ªói Geolocation:", error);
                weatherDataElement.innerHTML = '<p style="color: red;">Truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi ho·∫∑c th·∫•t b·∫°i. Vui l√≤ng cho ph√©p truy c·∫≠p v·ªã tr√≠.</p>';
            }
        );
    } else {
        weatherDataElement.innerHTML = '<p style="color: red;">Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation.</p>';
    }
}


// PROJECT QUY ƒê·ªîI TI·ªÄN (USD ‚Üí VND, d√πng API th·∫≠t)


const usdInput = document.getElementById("usd-amount");
const convertButton = document.getElementById("convert-usd");
const vndResult = document.getElementById("vnd-result");

let exchangeRate = null;

// G·ªçi API ƒë·ªÉ l·∫•y t·ª∑ gi√° th·∫≠t
async function fetchExchangeRate() {
    try {
        vndResult.textContent = "Fetching real exchange rate...";
        const response = await fetch("https://api.exchangerate-api.com/v4/latest/USD");
        const data = await response.json();
        exchangeRate = data.rates.VND;
        vndResult.textContent = `‚úÖ Current rate: 1 USD = ${exchangeRate.toLocaleString()} VND`;
        vndResult.style.color = "green";
    } catch (error) {
        vndResult.textContent = "‚ö†Ô∏è Failed to fetch exchange rate. Using default 25,000 VND.";
        exchangeRate = 25000;
        vndResult.style.color = "orange";
    }
}

// Chuy·ªÉn ƒë·ªïi USD ‚Üí VND
convertButton.addEventListener("click", () => {
    const usdValue = parseFloat(usdInput.value);
    if (isNaN(usdValue) || usdValue <= 0) {
        vndResult.textContent = "‚ùå Please enter a valid amount.";
        vndResult.style.color = "red";
        return;
    }

    if (!exchangeRate) {
        vndResult.textContent = "‚è≥ Please wait, fetching exchange rate...";
        vndResult.style.color = "orange";
        return;
    }

    const vndValue = usdValue * exchangeRate;
    vndResult.textContent = `üí∞ ${usdValue.toFixed(2)} USD = ${vndValue.toLocaleString()} VND`;
    vndResult.style.color = "green";
});

// C·∫≠p nh·∫≠t t·ª∑ gi√° m·ªói 30 ph√∫t
setInterval(fetchExchangeRate, 30 * 60 * 1000);


// KH·ªûI CH·∫†Y (Khi trang load)


const refreshPokemonBtn = document.getElementById('refresh-pokemon');

document.addEventListener('DOMContentLoaded', () => {
    fetchRandomPokemonData();      // L·∫•y Pok√©mon ng·∫´u nhi√™n
    getLocationAndFetchWeather();  // L·∫•y th·ªùi ti·∫øt
    fetchExchangeRate();           // L·∫•y t·ª∑ gi√° ban ƒë·∫ßu
});

// N√∫t "Next Pok√©mon"
if (refreshPokemonBtn) {
    refreshPokemonBtn.addEventListener('click', fetchRandomPokemonData);
}

// N√∫t "Refresh Weather"
if (refreshWeatherBtn) {
    refreshWeatherBtn.addEventListener('click', getLocationAndFetchWeather);
}
